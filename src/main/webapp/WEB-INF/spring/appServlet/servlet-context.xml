<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />


	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"/>
	</beans:bean>
	
	<!-- titles 적용하기  -->
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	  <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
	  <beans:property name="order" value="1"/>
	</beans:bean>
	
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" id="tilesViewResolver"/>
	
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer" id="tilesConfigurer">
	  <beans:property name="definitions">
	    <beans:list>
	      <beans:value>/WEB-INF/tiles/tiles.xml</beans:value>
	    </beans:list>
	  </beans:property>
	</beans:bean>
	
	<!--  여러 Controller에서 발생하는 예외 처리 -->
	<!-- <beans:bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
	   <beans:property name="exceptionMappings">
	      <beans:props>
	        <beans:prop key="java.lang.Exception">
	           error/errorMessage
	        </beans:prop>
	      </beans:props>
	   </beans:property>
	</beans:bean> -->
	
	
	<context:component-scan base-package="team.hunter.controller" />
	<aop:aspectj-autoproxy/>
	
	<context:component-scan base-package="team.hunter.scheduler"/>
    <task:scheduler id="jobScheduler" pool-size="10"/>
    <task:annotation-driven scheduler="jobScheduler"/>
	
	<!-- 뒤로가기했을대 새로 고침 되도록  즉 cache 사용안함 -->
	<interceptors>
	 <beans:bean class="org.springframework.web.servlet.mvc.WebContentInterceptor">
		  <beans:property name="cacheSeconds" value="0"/>
		  <beans:property name="useExpiresHeader" value="true"/>
		  <beans:property name="useCacheControlHeader" value="true"/>
		  <beans:property name="useCacheControlNoStore" value="true"/>
	  </beans:bean>	
	</interceptors>
</beans:beans>











